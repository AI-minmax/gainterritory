1. 데이터 형식
주어진 자료는 7 X 7 배열로 주어져있다.
data.csv파일이 1열로 되어있다.
system.py파일에 있는 self.whole_points[] 에 있는 data 활용.

2. 룰 기반 : 삼각형이 만들어지기 전까지 사용.
선분 하나로 삼각형 2개를 얻을 수 있는 경우에는 민맥스를 활용하지 않을 경우도 있음.
선분끼리 연결되지 않는 선분은 룰 기반으로 진행.
flag 변수를 통해 게임 초반에만 판단하도록 설정.
룰 기반을 풍부하게 만들어두기.

3. 평가함수(evaluation_function)
machine.py안에 있는 find_best_selection 함수.
candiate_line : 현재 삼각형을 만들 수 있는 선분들의 집합
candiate_line의 길이가 0이 아닐 경우 candiate_line 집합 안에서 1개를 랜덤으로 골라 진행.
candiate_line의 길이가 0일 경우 available한 선분 집합 중에서 1개를 골라 진행.

4. 민맥스 트리(minmax)
알파베타 가지치기는 병렬 프로그래밍에서는 불가능 : 한 코어에서 할당된 부분에서만 가지치기 가능 : 모듈화 필요
상대가 한 번에 2개의 삼각형을 득점한다면 -무한대.
우리가 한 번에 2개의 삼각형을 득점한다면 +무한대.
한 번에 2개의 삼각형을 얻는 것이 과연 무한대의 이점인가? : 그렇다고 가정.
더 이상 트리를 확장하지 않는 것으로 탐색해야 하는 범위를 축소.
12개의 코어를 사용할 수 있음. : 한 번에 12개 이상의 자식 노드가 나온다면 알파베타 가지치기를 사용하여 진행
12개 중 하나의 코어는 룰 기반 탐색으로 진행. 총 11개의 코어로 진행 가능.
1분 안에 탐색이 가능한가? : 최적해는 모든 탐색을 해야 얻을 수 있음. 모든 자식 노드에 대해 탐색을 하지 못한다면..
최적해가 아닌 알파베타 가지치기를 통해 최적해를 얻을 수 있는가.
삼각형을 만들 수 있는 노드를 발견할 시 바로 적용하는 것으로 알파베타 가지치기의 부족한 점을 보완할 수 있다.
1개의 삼각형 득점. 이후 상대편이 2개 득점한다면 좋지 않은 수. : 이것만 체크.
도저히 둘 수가 없을 때. 내가 무슨 수를 두든 상대가 삼각형을 득점할 수 밖에 없는 경우 : 고려하지 않음.
59초까지 해답을 얻지 못했을 때 1초 안에 어떻게 제일 나은 해를 뽑을 것인가.



전략 1 : flag 변수를 통해 게임 초반에만 판단하도록 설정.
선분끼리 연결되지 않는 선분 생성은 룰 기반으로 진행.
득점 가능한 상황에 무조건 득점할 것.


전략 2 : 
1. 선분을 그었을 때 상대가 삼각형을 만들 수 없는 경우를 긋는다.
2. 평가함수 사용.










